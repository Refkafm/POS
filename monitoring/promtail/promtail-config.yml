server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # Docker container logs
  - job_name: containers
    static_configs:
      - targets:
          - localhost
        labels:
          job: containerlogs
          __path__: /var/lib/docker/containers/*/*log
    
    pipeline_stages:
      # Parse Docker JSON logs
      - json:
          expressions:
            output: log
            stream: stream
            attrs:
      
      # Extract container information
      - json:
          expressions:
            tag:
          source: attrs
      
      # Parse container name and service
      - regex:
          expression: '^.+/(?P<container_name>.+?)/.+$'
          source: tag
      
      # Add labels based on container name
      - labels:
          stream:
          container_name:
      
      # Service-specific parsing
      - match:
          selector: '{container_name=~".*pos-backend.*"}'
          stages:
            - regex:
                expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z)\s+(?P<level>\w+)\s+(?P<message>.*)$'
                source: output
            - labels:
                level:
            - timestamp:
                source: timestamp
                format: RFC3339Nano
      
      - match:
          selector: '{container_name=~".*pos-frontend.*"}'
          stages:
            - regex:
                expression: '^(?P<timestamp>\d{2}/\w{3}/\d{4}:\d{2}:\d{2}:\d{2})\s+[+-]\d{4}\]\s+"(?P<method>\w+)\s+(?P<path>[^"]+)"\s+(?P<status>\d{3})\s+(?P<size>\d+)'
                source: output
            - labels:
                method:
                status:
            - timestamp:
                source: timestamp
                format: '02/Jan/2006:15:04:05 -0700'

  # Application-specific log files
  - job_name: pos-backend-logs
    static_configs:
      - targets:
          - localhost
        labels:
          job: pos-backend
          service: backend
          __path__: /app/logs/*.log
    
    pipeline_stages:
      # Parse structured JSON logs
      - json:
          expressions:
            timestamp: timestamp
            level: level
            message: message
            module: module
            userId: userId
            requestId: requestId
            method: method
            url: url
            statusCode: statusCode
            responseTime: responseTime
      
      # Add labels
      - labels:
          level:
          module:
          method:
          statusCode:
      
      # Parse timestamp
      - timestamp:
          source: timestamp
          format: RFC3339Nano
      
      # Drop debug logs in production
      - drop:
          expression: '.*'
          older_than: 24h
          source: level
          value: debug

  # System logs
  - job_name: syslog
    static_configs:
      - targets:
          - localhost
        labels:
          job: syslog
          __path__: /var/log/syslog
    
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2})\s+(?P<hostname>\S+)\s+(?P<service>\S+)(?:\[(?P<pid>\d+)\])?:\s+(?P<message>.*)$'
      
      - labels:
          hostname:
          service:
          pid:
      
      - timestamp:
          source: timestamp
          format: 'Jan 2 15:04:05'
          location: 'UTC'

  # MongoDB logs
  - job_name: mongodb
    static_configs:
      - targets:
          - localhost
        labels:
          job: mongodb
          service: database
          __path__: /var/log/mongodb/*.log
    
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}[+-]\d{4})\s+(?P<severity>\w+)\s+(?P<component>\w+)\s+\[(?P<context>[^\]]+)\]\s+(?P<message>.*)$'
      
      - labels:
          severity:
          component:
          context:
      
      - timestamp:
          source: timestamp
          format: RFC3339

  # Nginx access logs
  - job_name: nginx-access
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx
          log_type: access
          __path__: /var/log/nginx/access.log
    
    pipeline_stages:
      - regex:
          expression: '^(?P<remote_addr>[\d\.]+)\s+-\s+(?P<remote_user>\S+)\s+\[(?P<time_local>[^\]]+)\]\s+"(?P<method>\w+)\s+(?P<request_uri>[^"]+)\s+HTTP/[\d\.]+"\s+(?P<status>\d{3})\s+(?P<body_bytes_sent>\d+)\s+"(?P<http_referer>[^"]*)"\s+"(?P<http_user_agent>[^"]*)"(?:\s+"(?P<http_x_forwarded_for>[^"]*)")?'
      
      - labels:
          method:
          status:
          remote_addr:
      
      - timestamp:
          source: time_local
          format: '02/Jan/2006:15:04:05 -0700'

  # Nginx error logs
  - job_name: nginx-error
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx
          log_type: error
          __path__: /var/log/nginx/error.log
    
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\d{4}/\d{2}/\d{2}\s+\d{2}:\d{2}:\d{2})\s+\[(?P<level>\w+)\]\s+(?P<pid>\d+)#(?P<tid>\d+):\s+(?P<message>.*)$'
      
      - labels:
          level:
          pid:
      
      - timestamp:
          source: timestamp
          format: '2006/01/02 15:04:05'

# Limit configuration
limits_config:
  readline_rate: 10000
  readline_burst: 20000